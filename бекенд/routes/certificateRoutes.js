import express from 'express';
import db from '../models/index.js';
import { notifyUser, notifyRoles } from '../utils/notify.js';
import checkManagerOrAdmin from '../middleware/checkAdmin.js';
import { createMulterUpload } from '../utils/multerConfig.js';

const { Certificate, User, Course } = db;
const router = express.Router();

// üß© Upload –¥–ª—è PDF, max 10MB
const upload = createMulterUpload({
  folder: 'uploads/certificates',
  allowedMimeTypes: ['application/pdf'],
  maxFileSize: 10 * 1024 * 1024 // 10MB
});

// üîç –í—Å–µ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
router.get('/', checkManagerOrAdmin, async (req, res, next) => {
  try {
    const certificates = await Certificate.findAll({
      where: { is_verified: false },
      include: [{ model: User, as: 'user', attributes: ['id', 'name', 'department'] }]
    });
    res.json(certificates);
  } catch (err) {
    next(err);
  }
});

// üîç –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/my', async (req, res, next) => {
  try {
    const certificates = await Certificate.findAll({
      where: { user_id: req.currentUser.id }
    });
    res.json(certificates);
  } catch (err) {
    next(err);
  }
});

// ‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
router.post('/', upload.single('certificate'), async (req, res, next) => {
  try {
    if (!req.file) {
      const err = new Error('–§–∞–π–ª –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (—Ç–æ–ª—å–∫–æ PDF)');
      err.status = 400;
      return next(err);
    }

    const file_path = `/uploads/certificates/${req.file.filename}`;

    const cert = await Certificate.create({
      user_id: req.currentUser.id,
      file_path,
      is_verified: false
    });

    await notifyUser(req.currentUser.id, `–í—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç. –û–Ω –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.`);
    await notifyRoles({
      role: 'manager',
      department: req.currentUser.department,
      message: `${req.currentUser.name} –∑–∞–≥—Ä—É–∑–∏–ª –Ω–æ–≤—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.`
    });

    res.status(201).json(cert);
  } catch (err) {
    next(err);
  }
});

// ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏ –ø—Ä–∏–≤—è–∑–∫–∞ –∫—É—Ä—Å–∞
router.patch('/:id/verify', async (req, res, next) => {
  try {
    const cert = await Certificate.findByPk(req.params.id);
    if (!cert) {
      return res.status(404).json({ message: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const user = await User.findByPk(cert.user_id);
    const manager = req.currentUser;

    if (manager.role !== 'admin' && manager.department !== user.department) {
      return res.status(403).json({ message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é' });
    }

    const courseId = req.body.course_id;
    const course = await Course.findByPk(courseId);

    if (!course) {
      return res.status(400).json({ message: '–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É—Ä—Å –≤ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
    cert.course_id = courseId;
    cert.is_verified = true;
    await cert.save();

    // ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let userCompetencies = [];
    try {
      const parsed = JSON.parse(user.competencies || '[]');
      userCompetencies = Array.isArray(parsed) ? parsed : [];
    } catch {
      userCompetencies = [];
    }

    const compSet = new Set(userCompetencies);
    const courseCompetencies = course.competencies || [];
    courseCompetencies.forEach(c => compSet.add(c));

    user.competencies = [...compSet];
    await user.save();

    await notifyUser(user.id, `‚úÖ –í–∞—à —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏–∑ –∫—É—Ä—Å–∞ "${course.title}".`);

    res.json({ message: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã' });
  } catch (err) {
    next(err);
  }
});


export default router;
