import express from 'express';
import db from '../models/index.js';

import adminOnly from '../middleware/checkAdmin.js';
import auth from '../middleware/authMiddleware.js';
import { validateCourse } from '../middleware/validateCourse.js';
import { validationResult } from 'express-validator';
import { notifyUser, notifyRoles } from '../utils/notify.js';
import { createMulterUpload } from '../utils/multerConfig.js'; // ‚úÖ

const { Request, User, Course } = db;
const router = express.Router();

// üß© Upload —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
const upload = createMulterUpload({
  folder: 'uploads/courses',
  allowedMimeTypes: ['image/jpeg', 'image/png', 'image/webp'],
  maxFileSize: 5 * 1024 * 1024 // 5 MB
});

// üîç –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)
router.get('/all', auth, adminOnly, async (req, res, next) => {
  try {
    const allCourses = await Course.findAll();
    res.json(allCourses);
  } catch (err) {
    next(err);
  }
});

// üîç –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è)
router.get('/', auth, async (req, res, next) => {
  try {
    const user = req.user;
    const allCourses = await Course.findAll();

    if (user.role === 'admin') return res.json(allCourses);

    const now = new Date();
    const filtered = allCourses.filter(course => {
      const isOngoing = !course.end_date || new Date(course.end_date) >= now;
      return isOngoing;
    });

    res.json(filtered);
  } catch (err) {
    next(err);
  }
});

// üì® –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫—É—Ä—Å
router.post('/:id/apply', auth, async (req, res, next) => {
  const userId = req.user.userId;
  const courseId = req.params.id;

  try {
    const existing = await Request.findOne({ where: { user_id: userId, course_id: courseId } });
    if (existing) {
      const err = new Error('–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —ç—Ç–æ—Ç –∫—É—Ä—Å.');
      err.status = 400;
      return next(err);
    }

    await Request.create({ user_id: userId, course_id: courseId, status: 'pending' });

    const user = await User.findByPk(userId);
    const course = await Course.findByPk(courseId);

    await notifyUser(userId, `–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –∫—É—Ä—Å "${course.title}". –°—Ç–∞—Ç—É—Å: –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.`, '–ó–∞—è–≤–∫–∞ –Ω–∞ –∫—É—Ä—Å');
    await notifyRoles({
      role: 'manager',
      department: user.department,
      message: `–°–æ—Ç—Ä—É–¥–Ω–∏–∫ ${user.name} –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –∫—É—Ä—Å "${course.title}". –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ.`
    });

    res.json({ message: '–ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ.' });
  } catch (err) {
    next(err);
  }
});

// ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å
router.post('/', auth, adminOnly, upload.single('photo'), validateCourse, async (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    const err = new Error('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏');
    err.status = 400;
    err.details = errors.array();
    return next(err);
  }

  try {
    const {
      title,
      description,
      cost,
      start_date,
      end_date,
      department,
      competencies = '[]',
      link
    } = req.body;

    const photo = req.file ? `/uploads/courses/${req.file.filename}` : null;

    const course = await Course.create({
      title,
      description,
      cost,
      start_date,
      end_date,
      department,
      competencies: JSON.parse(competencies),
      photo,
      link
    });

    res.status(201).json(course);
  } catch (err) {
    next(err);
  }
});

// ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å
router.put('/:id', auth, adminOnly, upload.single('photo'), async (req, res, next) => {
  try {
    const course = await Course.findByPk(req.params.id);
    if (!course) {
      const err = new Error('–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      err.status = 404;
      return next(err);
    }

    const {
      title,
      description,
      cost,
      start_date,
      end_date,
      department,
      competencies,
      link
    } = req.body;

    if (title) course.title = title;
    if (description) course.description = description;
    if (cost) course.cost = cost;
    if (start_date) course.start_date = start_date;
    if (end_date) course.end_date = end_date;
    if (department) course.department = department;
    if (competencies) course.competencies = JSON.parse(competencies);
    if (link) course.link = link;
    if (req.file) course.photo = `/uploads/courses/${req.file.filename}`;

    await course.save();
    res.json(course);
  } catch (err) {
    next(err);
  }
});

// ‚ùå –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å
router.delete('/:id', auth, adminOnly, async (req, res, next) => {
  try {
    const course = await Course.findByPk(req.params.id);
    if (!course) {
      const err = new Error('–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      err.status = 404;
      return next(err);
    }

    await course.destroy();
    res.json({ message: '–ö—É—Ä—Å —É–¥–∞–ª—ë–Ω' });
  } catch (err) {
    next(err);
  }
});

export default router;
