import express from 'express';
import auth from '../middleware/authMiddleware.js';
import { ProjectRequest, Project, User } from '../models/index.js';
import { notifyUser } from '../utils/notify.js';
import currentUser from '../middleware/currentUser.js';

const router = express.Router();

// üì• –ó–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –æ—Ç–¥–µ–ª–∞
router.get('/', auth, currentUser, async (req, res, next) => {
  try {
    const current = req.currentUser;

    if (current.role !== 'manager') {
      const err = new Error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
      err.status = 403;
      return next(err);
    }

    const requests = await ProjectRequest.findAll({
      include: [
        { model: User, as: 'user', attributes: ['id', 'name', 'department'] },
        { model: Project, as: 'project', attributes: ['id', 'title'] }
      ],
      order: [['createdAt', 'DESC']]
    });

    const filtered = requests.filter(r => r.user?.department === current.department);
    res.json(filtered);
  } catch (err) {
    next(err);
  }
});

router.post('/:id/request', auth, async (req, res, next) => {
  try {
    const user = await User.findByPk(req.user.userId);
    const project = await Project.findByPk(req.params.id);

    if (!project) {
      const err = new Error('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      err.status = 404;
      return next(err);
    }

    const raw = user.competencies;
    const userComps = Array.isArray(raw) ? raw : JSON.parse(raw || '[]');
    const required = project.competencies_required || [];

    const missing = Object.values(required)
      .flat()
      .filter(r => !userComps.includes(r));

    if (missing.length) {
      const err = new Error(`–û—Ç–∫–∞–∑: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π: ${missing.join(', ')}`);
      err.status = 400;
      return next(err);
    }

    const existing = await ProjectRequest.findOne({
      where: { user_id: user.id, project_id: project.id }
    });

    if (existing) {
      const err = new Error('–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç.');
      err.status = 409;
      return next(err);
    }

    const request = await ProjectRequest.create({
      user_id: user.id,
      project_id: project.id,
      status: 'pending'
    });

    await notifyUser(user.id, `–í—ã –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ–µ–∫—Ç–µ: "${project.title}"`);

    if (project.managerId) {
      const manager = await User.findByPk(project.managerId);
      const messageManager = `–°–æ—Ç—Ä—É–¥–Ω–∏–∫ ${user.name} –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç "${project.title}"`;
      await notifyUser(manager.id, messageManager);
    }

    res.status(201).json(request);
  } catch (err) {
    next(err);
  }
});

router.patch('/:id/approve', auth, async (req, res, next) => {
  try {
    const request = await ProjectRequest.findByPk(req.params.id);
    if (!request) {
      const err = new Error('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      err.status = 404;
      return next(err);
    }

    const project = await Project.findByPk(request.project_id);
    if (!project) {
      const err = new Error('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      err.status = 404;
      return next(err);
    }

    request.status = 'approved';
    await request.save();

    const message = `‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç "${project.title}" –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.`;
    await notifyUser(request.user_id, message);

    res.json({ message: '–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' });
  } catch (err) {
    next(err);
  }
});

router.patch('/:id/reject', auth, async (req, res, next) => {
  try {
    const request = await ProjectRequest.findByPk(req.params.id);
    if (!request) {
      const err = new Error('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      err.status = 404;
      return next(err);
    }

    const project = await Project.findByPk(request.project_id);

    request.status = 'rejected';
    await request.save();

    const message = `‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç "${project.title}" –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`;
    await notifyUser(request.user_id, message);

    res.json({ message: '–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞' });
  } catch (err) {
    next(err);
  }
});

export default router;
